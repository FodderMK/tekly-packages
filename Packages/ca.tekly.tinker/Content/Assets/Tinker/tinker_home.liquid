<!doctype html>
<html lang="en">

{% assign title = 'Tinker' %}
{% include tinker_head %}

<body>
<div class="main">
{%- include tinker_sidebar -%}
<div class="main-content box-shadow nice-scrollbar">
	
	<div class="ui menu">
		<div class="right menu">
			<div class="item">
				<button class="ui mini button" onclick="add()">add</button>
				<button class="ui mini button" onclick="save()">save</button>
				<button class="ui mini button" onclick="resetWidgets()">reset</button>
				<div class="ui toggle checkbox">
					<input type="checkbox" onclick="toggleGridEditing(this)">
					<label>Edit</label>
				</div>
			</div>
		</div>
	</div>
	
	<div class="grid-stack">
	</div>
</div>
</div>
</body>

<script>
    const SETTINGS_KEY = "home.settings";

    const widgets = {
	{%- for card in Tinker.Home.Cards -%}
	{{ card.name }}: {
        name: "{{ card.Name }}",
            url: "{{ card.Url }}",
            width: {{ card.Width }},
        height: {{ card.Height }},
        isDefault: {{ card.Default }}
    },
	{%- endfor -%}
    };

    const grid = GridStack.init({
        cellHeight: "{{ Tinker.Home.CellHeight }}px",
    });

    grid.disable();

    function toggleGridEditing(checkbox) {
        if (checkbox.checked) {
            grid.enable();
        } else {
            grid.disable();
        }

        document.body.classList.toggle("edit");
    }

    function save() {
        const widgets = grid.save(true,false);

        for (let key in widgets) {
            if (widgets.hasOwnProperty(key)) {
                let widget = widgets[key];
                delete widget.content;
            }
        }

        const saveData = {
            widgets: widgets
        };

        localStorage.setItem(SETTINGS_KEY, JSON.stringify(saveData));
    }

    function resetWidgets() {
        grid.removeAll();
        addDefaultWidgets();
        save();
    }

    function add() {
        addWidget(widgets["appinfo"]);
	}
    
    function addWidget(widget) {
        const element = grid.addWidget(createWidgetHtml(widget), {
            w: widget.width,
            h: widget.height,
            name: widget.name,
        });

        htmx.process(element);
    }

    function createWidgetHtml(widget) {
        return`
<div class="grid-stack-item">
	<div class="grid-stack-item-content">				
		<div class="card box-shadow" hx-trigger="revealed,reload" hx-get="${widget.url}" hx-swap="outerHTML">				
		</div>
	</div>
</div>
`;
    }

    function triggerReload(element) {
        let event = new Event("reload", {bubbles: true});
        element.dispatchEvent(event);
    }

    function triggerRemove(element) {
        let event = new Event("remove", {bubbles: true});
        element.dispatchEvent(event);
    }

    function initialize() {
        const settings = localStorage.getItem(SETTINGS_KEY);

        if (settings) {
            try {
                const saveData = JSON.parse(settings);
                for (const widget of saveData.widgets) {
                    const widgetData = widgets[widget.name];

                    let instance = grid.addWidget(createWidgetHtml(widgetData), {
                        w: widget.w,
                        h: widget.h,
                        x: widget.x,
                        y: widget.y,
                        name: widget.name,
                    });

                    instance.addEventListener("remove", () => grid.removeWidget(instance));
                }
            } catch (error) {
                console.error('Stored item is not valid JSON:', error);
                addDefaultWidgets();
            }
        } else {
            addDefaultWidgets();
        }
    }

    function addDefaultWidgets() {
        for (let key in widgets) {
            if (widgets.hasOwnProperty(key)) {
                let widget = widgets[key];
                addWidget(widget)
            }
        }
    }

    initialize();
</script>

</html>